<AML>
 <Item type="Method" id="5E437890A18A49B48069AC0E0D78CA32" action="add">
  <classification>/*</classification>
  <comments>CMII fetches an inverted structure for the Wizard</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA['   WU explosion -   then walk back down returning the sparse BOM of the TOP Items.
'  input is  <Item type="Material"  id="xxx"><materialno>xxx</materialno><description>xxx</description></Item>
'
'    Walks to top of  Material-BOM-Material using XML queries.  When a top is found, it records the path back down.
'    Will find all unique top assemblies and record their paths back to the kernel
'    Returns a structure that looks like a BOM for each of the top items
'    <Item type=Material id=xxxx  description=xxxxx materialno=xxxx>
'         <Item type=Material id=yyyyy description=yyyy materialno=yyy>
'    </Item>
'  10-12-04  Peter Schroer
'  03-06-2005 peter  converted to 6.1 IOM API  and allow for a Document or Part as the kernel
'  03-07-2005  added support for Functions in methods
'  04-11-2005  peter  added  is_current flag to queries and commented-out the debug code, correct deep tree building (no cross links)
'  04-19-2005  peter  changed the methodtemplateName to VBMain
'
' ' this instructs the compiler to use an alternate template in method_config.xml  that allows Functions
'MethodTemplateName=VBMain;
Dim DEBUG = 0

Function Main() As Item
	Dim inItem As Item
    inItem= Me.getItemsByXpath("//Item/Item").getItemByIndex(0)
    If DEBUG=1 Then CCO.Utilities.WriteDebug("wu", "InDom= " & inItem.dom.innerxml)
    ' system.diagnostics.debugger.break()     
	Dim Parts As Item =Me.newItem()   '  this holds the list of Part items for parts that have been processed already, so we don't process them again.
	Dim Final As Item =Me.newItem()   '  this holds the final list of items, structured as top-down to return to the client
	Final.loadAML("<Result></Result>") '  list starts empty
	
	'  load the Parts list with the one item (part or document) that was passed in. 
	'  need the <Items> tag to make this a collection of Items  
	Parts.loadAML("<Items><Item type='" + inItem.GetType() +"' id='" & inItem.getID() & "' item_number='"  &  inItem.getProperty("item_number") & "' name='" & inItem.getProperty("name") & "'></Item></Items>")
	
	' now do a single level where-used for this   Item-ID and Item-Type
	'  pass the handle to the IOM api,  myInnovator
	'  pass the Part and Final collections for the functiosn to populate
	'  pass the ID + Type of the seed of the next WU explosion
	'  last argument is Path,  which will be a delimited list of ID's indicating the path followed to get to the current Seed.
    ' CCO.Utilities.WriteDebug("wu", "Startup seed= " & inItem.GetType() & "  " & inItem.getID())
	
	ExplodedWU(inItem.getID(),inItem.GetType(),Parts,Final,inItem.getID() )
	
	Return Final
End Function
'=========================================================================

Private Function ExplodedWU(seedID, seedTYPE, Parts, Final, path)   
    If DEBUG=1 Then CCO.Utilities.WriteDebug("wu", "ExplodingWU()  " &  seedID & " " & seedTYPE)

    Dim Result
    Dim Query= Parts.newItem()
    Dim CheckItem,partTmp As Item
    Dim PartTest
    Dim WUitems
    Dim compTmp
    Dim Component As Item
   
  ' first test if this Part has any Parents
    If seedTYPE = "Part" Then
       Query.loadAML("<Item type='Part' action='get' select='is_current,item_number,name'><is_current>1</is_current><Relationships><Item type='Part BOM' action='get' select='source_id,related_id'><related_id>" & seedID  & "</related_id></Item></Relationships></Item>")
       If DEBUG=1 Then CCO.Utilities.WriteDebug("wu", Query.dom.outerxml )
       Result=Query.apply() 
     Else  ' Assume Document
       Query.loadAML("<Item type='Part' action='get' select='is_current,item_number,name'><is_current>1</is_current><Relationships><Item type='Part Document' action='get' select='source_id,related_id'><related_id>" & seedID  & "</related_id></Item></Relationships></Item>")
       If DEBUG=1 Then CCO.Utilities.WriteDebug("wu", Query.dom.outerxml )
       Result=Query.apply() 
    End If
    If DEBUG=1 Then CCO.Utilities.WriteDebug("wu", Result.dom.outerxml)
    WUitems= Result.getItemsByXPath("//Result/Item[@type='Part']")  
    If WUitems.getItemCount() =  0 Then
       ' system.diagnostics.debugger.break()    
       '  No parents - this is a top - Add it to TOP and build structure all the way down to the source
       ' checking if we already have it first?
       CheckItem = Final.getItemsByXPath("//Item[@id='" & seedID & "']")

       If CheckItem.getItemCount() =0 Then ' add it to the Final configuration of Items as a top node
          partTmp = Parts.getItemsByXPath("//Item[@id='" & seedID & "']").getItemByIndex(0)
          
          compTmp = Final.dom.createElement("Item")
          compTmp.setAttribute("type", seedTYPE)
          compTmp.setAttribute("id",   seedID)
          compTmp.setAttribute("item_number",  partTmp.getAttribute("item_number") )
          compTmp.setAttribute("name", partTmp.getAttribute("name") )
          Final.dom.selectSingleNode("//Result").appendChild( compTmp )     
 
          If DEBUG=1 Then CCO.Utilities.WriteDebug("WU", "adding " & seedTYPE & " " & seedID & " to Final as a Top ")
	   End If
       '  this new top level Part is now in Final (or was in Final).  Add the path down to the seed Item
       BuildTopDown(Parts,Final,path) 
       Exit Function
    End If
    Dim i As Integer
    Dim WUitem As Item
    For i=0 To WUitems.getItemCount() -1
      Component = WUitems.getItemByIndex(i)
  
      '   see if we have seen this part before - if so,  exit
      PartTest = Parts.getItemsByXPath("//Item[@id='" & Component.getID()  & "']")
      If  PartTest.getItemCount() >0 Then
         BuildTopDown(Parts,Final,  Component.getID() & "|" & path)
         '  Exit Function
      Else
         If DEBUG=1 Then CCO.Utilities.WriteDebug("WU", "New Component xml = " & Component.getID() & "  " & Component.getProperty("item_number") )

         '  add the Part to the Library of Parts - 
         compTmp = Parts.dom.createElement("Item")
         compTmp.setAttribute("type", Component.GetType() )
         compTmp.setAttribute("id", Component.getID() )
         compTmp.setAttribute("item_number", Component.getProperty("item_number") )
         compTmp.setAttribute("name", Component.getProperty("name") )
         Parts.dom.selectSingleNode("//Items").appendChild( compTmp )

         ExplodedWU(Component.getID(),"Part",Parts,Final, Component.getID() & "|" & path)
     End If
  Next

End Function
'==========================================================================
Public Function  BuildTopDown(Parts, Final, path)  
     If DEBUG=1 Then CCO.Utilities.WriteDebug("WU", "BUILD " & "  " & path)
     ' system.diagnostics.debugger.break()
     Dim idTmp, currentId As String
     Dim partTmp As Item
     Dim compTmp 
     Dim iCount As Integer
     Dim Xpath As String
     Dim ids = Split(path,"|")
     For iCount = 0 To Ubound(ids) 
       If iCount = 0 Then
          currentId = ids(iCount)
          Xpath = "//Item[@id='" & currentId & "']"
          If DEBUG=1 Then CCO.Utilities.WriteDebug("WU", "here " & Ubound(ids) & "  set currentID to " & currentId)
          If DEBUG=1 Then CCO.Utilities.WriteDebug("WU", "XPATH = " & Xpath)
       Else
          idTmp = ids(iCount)
          partTmp = Parts.getItemsByXPath("//Item[@id='" & idTmp & "']").getItemByIndex(0)
          
          compTmp = Final.dom.createElement("Item")
          If DEBUG=1 Then CCO.Utilities.WriteDebug("WU", "   Adding child=" & idTmp & "  under parent=" & currentId)

          compTmp.setAttribute("type", partTmp.GetType() )
          compTmp.setAttribute("id", idTmp)
          compTmp.setAttribute("item_number", partTmp.getAttribute("item_number"))
          compTmp.setAttribute("name", partTmp.getAttribute("name"))
          Final.dom.selectSingleNode(Xpath).appendChild(compTmp)
          
          currentId = idTmp 
          Xpath = Xpath & "/Item[@id='" & currentId & "']"
          if DEBUG=1 then CCO.Utilities.WriteDebug("WU", "XPATH = " & Xpath)
       End If
     Next
End Function
'===================================================================

]]></method_code>
  <method_type>VB</method_type>
  <name>CMII-Fetch-WU</name>
 </Item>
</AML>