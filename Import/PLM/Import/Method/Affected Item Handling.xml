<AML>
 <Item type="Method" id="4E515BC756E7407E84C95416DCE91F8E" action="add">
  <classification>/*</classification>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// Grant 'Aras PLM' permissions
Aras.Server.Security.Identity plmIdentity = Aras.Server.Security.Identity.GetByName("Aras PLM");
bool PermissionWasSet  = Aras.Server.Security.Permissions.GrantIdentity(plmIdentity);

Innovator inn = this.getInnovator();
string rootXPath = "/*/*/Result/Item/related_id/";
string affItemRelType = this.getType() + " Affected Item";

// Retrieve the Affected Items
Item affItemRel = this.newItem(affItemRelType,"get");
affItemRel.setAttribute("select","related_id");
affItemRel.setProperty("source_id",this.getID());
Item affItem = affItemRel.createRelatedItem("Affected Item","get");
affItem.setAttribute("select","action,interchangeable,affected_id(keyed_name,state,is_released,itemtype),new_item_id(keyed_name,state,config_id,itemtype)");
affItemRel = affItemRel.apply();
if (affItemRel.getItemCount() < 0) 
{
  return inn.newError("Error retrieving Affected Items: " + affItemRel.getErrorDetail());
}

// Validate that at least one Affected Item Is present
if (0 == affItemRel.getItemCount())
{
  return inn.newError("Affected Item Error: At least one Affected Item must be specified");
}

// Validate that all Affected Items With action=Change/Delete have an affected_id
Item thisCheck = affItemRel.getItemsByXPath(rootXPath+"Item[action='Change' or action='Delete'][not(affected_id/Item)]");
if (thisCheck.getItemCount() > 0)
{
  return inn.newError(String.Format("Affected Item Error: The Old Number field is required when Action is {0}",
                      thisCheck.getItemByIndex(0).getProperty("action","")));
}

// Validate that all Affected Items With action=Add Or action=Change And interchangeable=0 have a new_item_id
thisCheck = affItemRel.getItemsByXPath(rootXPath+"Item[action='Add' or (action='Change' and interchangeable='0')][not(new_item_id/Item)]");
if (thisCheck.getItemCount() > 0)
{
  return inn.newError(String.Format("Affected Item Error: The New Number field is required when Action is {0}.",
                      thisCheck.getItemByIndex(0).getProperty("action","") == "Add" ? "Add" : "Change and Interchangeable is not set"));
}

// Validate that all Affected Items With action=Delete Or action=Change And interchangeable=1 Do Not have a new_item_id
thisCheck = affItemRel.getItemsByXPath(rootXPath+"Item[action='Delete' or (action='Change' and interchangeable='1')][boolean(new_item_id/Item)]");
if (thisCheck.getItemCount() > 0)
{
  return inn.newError(String.Format("Affected Item Error: The New Number field must be empty when Action is {0}. Invalid item: {1}",
                      thisCheck.getItemByIndex(0).getProperty("action","") == "Delete" ? "Delete" : "Change and Interchangeable is set",
                      thisCheck.getItemByIndex(0).getPropertyItem("new_item_id").getProperty("keyed_name","unknown")));
}

// Validate that all Affected Items With action=Add Do Not have an affected_id
thisCheck = affItemRel.getItemsByXPath(rootXPath+"Item[action='Add'][boolean(affected_id/Item)]");
if (thisCheck.getItemCount() > 0)
{
  return inn.newError(String.Format("Affected Item Error: The Old Number field must be empty when Action is Add. Invalid item: {0}",
                    thisCheck.getItemByIndex(0).getPropertyItem("affected_id").getProperty("keyed_name","unknown")));
}

// Validate that all affected_id items are In the Released state
if (thisCheck.getItemCount() > 0)
{
  return inn.newError(String.Format("Affected Item Error: Items in the Old Number field must be Released. Invalid item: {0}",
                    thisCheck.getItemByIndex(0).getPropertyItem("affected_id").getProperty("keyed_name","unknown")));
}

// Validate that all new_item_id items are In the Preliminary state
thisCheck = affItemRel.getItemsByXPath(rootXPath+"Item[new_item_id/Item/state!='Preliminary']");
if (thisCheck.getItemCount() > 0)
{
  return inn.newError(String.Format("Affected Item Error: Items in the New Number field must be Preliminary. Invalid item: {0}",
                    thisCheck.getItemByIndex(0).getPropertyItem("new_item_id").getProperty("keyed_name","unknown")));
}

// Validate that the Type of the new_item_id Is the same As that of the affected_id For action=Change And interchangeable=1
thisCheck = affItemRel.getItemsByXPath(rootXPath+"Item[action='Change' and interchangeable='1'][new_item_id/Item/@type!=affected_id/Item/@type]");
if (thisCheck.getItemCount() > 0)
{
  return inn.newError(String.Format("Affected Item Error: The types of the Old Number and New Number must match. Invalid item: {0}",
                      thisCheck.getItemByIndex(0).getPropertyItem("affected_id").getProperty("keyed_name","unknown")));
}

// Validate that all Affected Items With action=Add have a new_item_id that was never released
//  Do this check last because it requires an additional query
thisCheck = affItemRel.getItemsByXPath(rootXPath+"Item[action='Add']/new_item_id/Item");
StringBuilder idList = new StringBuilder();
if (thisCheck.getItemCount() > 0)
{
  for (int i=0; i<thisCheck.getItemCount(); i++) 
  {
    idList.Append("'"+thisCheck.getItemByIndex(i).getProperty("config_id","")+"',");
  }
  idList.Remove(idList.Length - 1,1);
  thisCheck = this.newItem("Change Controlled Item","get");
  thisCheck.setAttribute("select","config_id");
  thisCheck.setProperty("generation","*");
  thisCheck.setPropertyCondition("generation","like");
  thisCheck.setProperty("config_id",idList.ToString());
  thisCheck.setPropertyCondition("config_id","in");
  thisCheck.setProperty("is_released","1");
  thisCheck = thisCheck.apply();
  if (thisCheck.getItemCount() > 0)
  {
    return inn.newError("Affected Item Error: " +
                          "When Action is Add, the item in the New Number field must never have been released. Invalid item: " +
                          affItemRel.getItemsByXPath(rootXPath+"Item[action='Add']/new_item_id/Item[config_id='"+thisCheck.getItemByIndex(0).getProperty("config_id","-")+"']").getProperty("keyed_name","unknown"));
  }
}

// Promote affected_id items To In Change
thisCheck = affItemRel.getItemsByXPath(rootXPath+"Item/affected_id/Item");
Item q = this.newItem();
Item r;
for (int i=0; i<thisCheck.getItemCount(); i++)
{
  r = thisCheck.getItemByIndex(i);
  q.setAttribute("typeId", r.getProperty("itemtype", ""));
  q.setAttribute("action", "PromoteItem");
  q.setID(thisCheck.getItemByIndex(i).getID());
  q.setProperty("state","In Change");
  r = q.apply();
  if (r.isError()) return r;
}

// Version affected_id items For action=Change And interchangeable=1
if (affItemRel.getItemsByXPath(rootXPath+"Item[@type='Affected Item'][action='Change'][interchangeable='1']").getItemCount() > 0)
{
  Item z = this.newItem("SQL", "SQL PROCESS");
  z.setProperty("name", "PE_GetAffectedItemHandlingOrder");
  z.setProperty("PROCESS", "CALL");
  z.setProperty("ARG1", this.getID());
  z.setProperty("TYPE", affItemRelType);
  z = z.apply();

  for (int i=0; i<z.getItemCount(); i++)
  {
    String thisId = z.getItemByIndex(i).getProperty("obj_affected_item_id",".");
    Item thisItem = affItemRel.getItemsByXPath(rootXPath+"Item[@type='Affected Item'][action='Change'][interchangeable='1'][../../@id='"+thisId+"']");
    if (thisItem.getItemCount() == 1)
    {
      Item tempItem = this.newItem();
      tempItem.loadAML("<Item typeId='"+thisItem.getPropertyItem("affected_id").getProperty("itemtype", "")+"' action='version'/>");
      tempItem.setID(thisItem.getProperty("affected_id","NON_EXISTING"));
      tempItem = tempItem.apply();
      if (tempItem.isError()) return inn.newError("Affected Item Error: Error versioning item: "+thisItem.getPropertyItem("affected_id").getProperty("keyed_name","unknown"));
      tempItem = tempItem.apply("unlock");
      if (tempItem.isError()) return inn.newError("Affected Item Error: Error unlocking item: "+thisItem.getPropertyItem("affected_id").getProperty("keyed_name","unknown"));
//DAL
//System.Diagnostics.Debugger.Break(); 
      //this = ECN
      //thisItem = current affected item in the loop of affected items on the ECN
      //tempItem = new version of the part on the current affected item (thisItem)
      
      Item bulkChange = inn.newItem();
      //get affected item bulk change record where source id is the current affected item in the loop
      bulkChange.loadAML("<Item type='Affected Item Bulk Change' action='get' select='replace_from,replace_to'><source_id>" + thisItem.getID() + "</source_id></Item>");
      bulkChange = bulkChange.apply();
      //if (bulkChange.isError()) return inn.newError("Error returning Bulk Change record for " + thisItem.getPropertyItem("affected_id").getProperty("keyed_name","unknown"));
      if (bulkChange.getItemCount() > 0) {
        string fromId = bulkChange.getProperty("replace_from");
        string toId = bulkChange.getProperty("replace_to");
        Item partBom = inn.newItem();
        partBom.loadAML("<Item type='Part BOM' action='get'><source_id>" + tempItem.getID() + "</source_id><related_id>" + fromId + "</related_id></Item>");
        partBom = partBom.apply();
        //if (partBom.isError()) return inn.newError("Error retuning Part BOM item");
    	for (int j=0; j<partBom.getItemCount(); j++)
    	{
        	Item partBom2 = inn.newItem("Part BOM", "edit");
        	partBom2.setID(partBom.getItemByIndex(j).getID());
        	partBom2.setProperty("related_id", toId);
        	partBom2 = partBom2.apply();
        	if (partBom2.isError()) {
	        	inn.newError("Error doing bulk change replacement in " + thisItem.getPropertyItem("affected_id").getProperty("keyed_name","unknown"));
        	}
    	}
      }
      
      //check if thisIem does not have an affected bulk change record.
      //  True = exit these steps
      //get FROM and TO ids from the affected bulk change record
      //get Part BOM relationship item between tempItem with FROM object
      //lock Part Bom item
      //Update Part Bom item replacing the refernce to the From with the To 
//dal
      affItem = this.newItem("Affected Item","edit");
      affItem.setID(thisItem.getID());
      affItem.setAttribute("serverEvents","0");
      affItem.setAttribute("doGetItem","0");
      affItem.setProperty("new_item_id",tempItem.getID());
      affItem = affItem.apply();
      if (affItem.isError()) return inn.newError("Affected Item Error: Error editing Affected Item: "+thisItem.getPropertyItem("affected_id").getProperty("keyed_name","unknown"));
    }
  }
}

// Revoke 'Aras PLM' permissions
if (PermissionWasSet) Aras.Server.Security.Permissions.RevokeIdentity(plmIdentity);
return this;]]></method_code>
  <method_type>C#</method_type>
  <name>Affected Item Handling</name>
 </Item>
</AML>